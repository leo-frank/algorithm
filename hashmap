首先什么是 哈希表，哈希表（英文名字为Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指hash table就可以了）。
那么哈希表能解决什么问题呢，「一般哈希表都是用来快速判断一个元素是否出现集合里。」
例如要查询一个名字是否在这所学校里。
要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1) 就可以做到。
当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。
  数组
  set （集合）
  map(映射)
这里数组就没啥可说的了，我们来看一下set和map.
在C++语言中，实现在C++中，set 和 map 分别提供了以下三种数据结构，其底层实现以及优劣如下表所示：
std::set 红黑树 有序 不可重复数据 不可更改数据 查询效率O(logn) 增删效率O(logn)
std::multiset 红黑树 有序 可重复数据 不可更改数据 查询效率O(logn) 增删效率O(logn)
std::unordered_set 哈希表 无序 不可重复数据 不可更改数据 查询效率O(1) 增删效率O(1)
std::map 红黑树 key有序 key不可重复数据 key不可更改 查询效率O(logn) 增删效率O(logn)
std::multimap 红黑树 key有序 key可重复数据 key不可更改 查询效率O(logn) 增删效率O(logn)
std::unordered_map 哈希表 key无序 key不可重复数据 不可更改 查询效率O(1) 增删效率O(1)

当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。

总结一下，当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法。
但是哈希法也是牺牲了空间换取了时间，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。
